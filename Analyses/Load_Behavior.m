
clear
clc
close all

P = analysisParameters();
Paths = P.Paths;
Participants = P.Participants;
Sessions = P.Sessions;
PlotProps = P.Manuscript;
Refresh = false;

Labels = P.Labels;
StatsP = P.StatsP;

TitleTag = 'Behavior';



%%% Load data

TaskData = fullfile(Paths.Data, 'Behavior', 'Oddball_Trials.mat');
if ~exist(TaskData, 'file') || Refresh
    AllAnswers = importOddball(Paths.Datasets, Task, fullfile(Paths.Data, 'Behavior'));
    Answers = cleanupOddball(AllAnswers);
    Answers = fixRTs(Answers, Paths);
    save(TaskData, 'Answers')
else
    load(TaskData, 'Answers')
end

% TEMP FIX
Answers.Type(strcmp(Answers.condition, "Target") & isnan(Answers.keyPress)) = 4;


Results = fullfile(Paths.Results, 'Behavior');
if ~exist(Results, 'dir')
    mkdir(Results)
end



%% save to pool

% mean reaction times
[Data, ~] = tabulateTable(Answers, 'RT', 'mean', Participants, Sessions, []); % TODO: copy function from Paper1 repo
save(fullfile(Paths.Pool, [TitleTag, '_meanRT.mat']), 'Data')


% standard deviation of reaction times
[Data, ~] = tabulateTable(Answers, 'RT', 'std', Participants, Sessions, []);
save(fullfile(Paths.Pool, [TitleTag, '_stdRT.mat']), 'Data')


% lapses
[Matrix, Things] = tabulateTable(Answers, 'Type', 'tabulate', Participants, Sessions, []); % Matrix dim 3 is 3: FA, 4: lapses

Matrix(:, :, 3) = Matrix(:, :, 3)-1;% remove extra false alarm generated by start of task

Data = squeeze(Matrix(:, :, 4));
save(fullfile(Paths.Pool, [TitleTag, '_lapses.mat']), 'Data')


% false alarms
Data = squeeze(Matrix(:, :, 3));
save(fullfile(Paths.Pool, [TitleTag, '_falseAlarms.mat']), 'Data')


% performance
Matrix(:, :, 5) = 1 - (Matrix(:, :, 3)+Matrix(:, :, 4))/199;

Data = squeeze(Matrix(:, :, 5));
save(fullfile(Paths.Pool, [TitleTag, '_performance.mat']), 'Data')

